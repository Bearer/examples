/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@bearer/ui';
import '@stencil/redux';

import {
  PR,
  Repository,
} from './types.d';

declare global {

  namespace StencilComponents {
    interface AttachPullRequest {
      'bearerDisplayId': string;
    }
  }

  interface HTMLAttachPullRequestElement extends StencilComponents.AttachPullRequest, HTMLStencilElement {}

  var HTMLAttachPullRequestElement: {
    prototype: HTMLAttachPullRequestElement;
    new (): HTMLAttachPullRequestElement;
  };
  interface HTMLElementTagNameMap {
    'attach-pull-request': HTMLAttachPullRequestElement;
  }
  interface ElementTagNameMap {
    'attach-pull-request': HTMLAttachPullRequestElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'attach-pull-request': JSXElements.AttachPullRequestAttributes;
    }
  }
  namespace JSXElements {
    export interface AttachPullRequestAttributes extends HTMLAttributes {
      'bearerDisplayId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AttachPullRequestDisplay {
      'bearerId': string;
    }
  }

  interface HTMLAttachPullRequestDisplayElement extends StencilComponents.AttachPullRequestDisplay, HTMLStencilElement {}

  var HTMLAttachPullRequestDisplayElement: {
    prototype: HTMLAttachPullRequestDisplayElement;
    new (): HTMLAttachPullRequestDisplayElement;
  };
  interface HTMLElementTagNameMap {
    'attach-pull-request-display': HTMLAttachPullRequestDisplayElement;
  }
  interface ElementTagNameMap {
    'attach-pull-request-display': HTMLAttachPullRequestDisplayElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'attach-pull-request-display': JSXElements.AttachPullRequestDisplayAttributes;
    }
  }
  namespace JSXElements {
    export interface AttachPullRequestDisplayAttributes extends HTMLAttributes {
      'bearerId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AttachPullRequestSetupDisplay {

    }
  }

  interface HTMLAttachPullRequestSetupDisplayElement extends StencilComponents.AttachPullRequestSetupDisplay, HTMLStencilElement {}

  var HTMLAttachPullRequestSetupDisplayElement: {
    prototype: HTMLAttachPullRequestSetupDisplayElement;
    new (): HTMLAttachPullRequestSetupDisplayElement;
  };
  interface HTMLElementTagNameMap {
    'attach-pull-request-setup-display': HTMLAttachPullRequestSetupDisplayElement;
  }
  interface ElementTagNameMap {
    'attach-pull-request-setup-display': HTMLAttachPullRequestSetupDisplayElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'attach-pull-request-setup-display': JSXElements.AttachPullRequestSetupDisplayAttributes;
    }
  }
  namespace JSXElements {
    export interface AttachPullRequestSetupDisplayAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AttachPullRequestSetup {

    }
  }

  interface HTMLAttachPullRequestSetupElement extends StencilComponents.AttachPullRequestSetup, HTMLStencilElement {}

  var HTMLAttachPullRequestSetupElement: {
    prototype: HTMLAttachPullRequestSetupElement;
    new (): HTMLAttachPullRequestSetupElement;
  };
  interface HTMLElementTagNameMap {
    'attach-pull-request-setup': HTMLAttachPullRequestSetupElement;
  }
  interface ElementTagNameMap {
    'attach-pull-request-setup': HTMLAttachPullRequestSetupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'attach-pull-request-setup': JSXElements.AttachPullRequestSetupAttributes;
    }
  }
  namespace JSXElements {
    export interface AttachPullRequestSetupAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AttachedPullRequestItem {
      'onRemove': (pullRequest: PR) => void;
      'pullRequest': PR;
    }
  }

  interface HTMLAttachedPullRequestItemElement extends StencilComponents.AttachedPullRequestItem, HTMLStencilElement {}

  var HTMLAttachedPullRequestItemElement: {
    prototype: HTMLAttachedPullRequestItemElement;
    new (): HTMLAttachedPullRequestItemElement;
  };
  interface HTMLElementTagNameMap {
    'attached-pull-request-item': HTMLAttachedPullRequestItemElement;
  }
  interface ElementTagNameMap {
    'attached-pull-request-item': HTMLAttachedPullRequestItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'attached-pull-request-item': JSXElements.AttachedPullRequestItemAttributes;
    }
  }
  namespace JSXElements {
    export interface AttachedPullRequestItemAttributes extends HTMLAttributes {
      'onRemove'?: (pullRequest: PR) => void;
      'pullRequest'?: PR;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BearerFinalScreen {
      'getTitle': () => void;
      'perform': (any) => Promise<any>;
      'willAppear': (context: any) => void;
      'willDisappear': () => void;
    }
  }

  interface HTMLBearerFinalScreenElement extends StencilComponents.BearerFinalScreen, HTMLStencilElement {}

  var HTMLBearerFinalScreenElement: {
    prototype: HTMLBearerFinalScreenElement;
    new (): HTMLBearerFinalScreenElement;
  };
  interface HTMLElementTagNameMap {
    'bearer-final-screen': HTMLBearerFinalScreenElement;
  }
  interface ElementTagNameMap {
    'bearer-final-screen': HTMLBearerFinalScreenElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bearer-final-screen': JSXElements.BearerFinalScreenAttributes;
    }
  }
  namespace JSXElements {
    export interface BearerFinalScreenAttributes extends HTMLAttributes {
      'onScenarioCompleted'?: (event: CustomEvent) => void;
      'perform'?: (any) => Promise<any>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface HelloWorld {

    }
  }

  interface HTMLHelloWorldElement extends StencilComponents.HelloWorld, HTMLStencilElement {}

  var HTMLHelloWorldElement: {
    prototype: HTMLHelloWorldElement;
    new (): HTMLHelloWorldElement;
  };
  interface HTMLElementTagNameMap {
    'hello-world': HTMLHelloWorldElement;
  }
  interface ElementTagNameMap {
    'hello-world': HTMLHelloWorldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hello-world': JSXElements.HelloWorldAttributes;
    }
  }
  namespace JSXElements {
    export interface HelloWorldAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ListPullRequests {
      'repository': any;
    }
  }

  interface HTMLListPullRequestsElement extends StencilComponents.ListPullRequests, HTMLStencilElement {}

  var HTMLListPullRequestsElement: {
    prototype: HTMLListPullRequestsElement;
    new (): HTMLListPullRequestsElement;
  };
  interface HTMLElementTagNameMap {
    'list-pull-requests': HTMLListPullRequestsElement;
  }
  interface ElementTagNameMap {
    'list-pull-requests': HTMLListPullRequestsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'list-pull-requests': JSXElements.ListPullRequestsAttributes;
    }
  }
  namespace JSXElements {
    export interface ListPullRequestsAttributes extends HTMLAttributes {
      'repository'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ListRepositories {

    }
  }

  interface HTMLListRepositoriesElement extends StencilComponents.ListRepositories, HTMLStencilElement {}

  var HTMLListRepositoriesElement: {
    prototype: HTMLListRepositoriesElement;
    new (): HTMLListRepositoriesElement;
  };
  interface HTMLElementTagNameMap {
    'list-repositories': HTMLListRepositoriesElement;
  }
  interface ElementTagNameMap {
    'list-repositories': HTMLListRepositoriesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'list-repositories': JSXElements.ListRepositoriesAttributes;
    }
  }
  namespace JSXElements {
    export interface ListRepositoriesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PinPullRequest {
      'context': any;
    }
  }

  interface HTMLPinPullRequestElement extends StencilComponents.PinPullRequest, HTMLStencilElement {}

  var HTMLPinPullRequestElement: {
    prototype: HTMLPinPullRequestElement;
    new (): HTMLPinPullRequestElement;
  };
  interface HTMLElementTagNameMap {
    'pin-pull-request': HTMLPinPullRequestElement;
  }
  interface ElementTagNameMap {
    'pin-pull-request': HTMLPinPullRequestElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pin-pull-request': JSXElements.PinPullRequestAttributes;
    }
  }
  namespace JSXElements {
    export interface PinPullRequestAttributes extends HTMLAttributes {
      'context'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PullRequestIcon {
      'state': '' | 'open' | 'closed' | 'merged';
    }
  }

  interface HTMLPullRequestIconElement extends StencilComponents.PullRequestIcon, HTMLStencilElement {}

  var HTMLPullRequestIconElement: {
    prototype: HTMLPullRequestIconElement;
    new (): HTMLPullRequestIconElement;
  };
  interface HTMLElementTagNameMap {
    'pull-request-icon': HTMLPullRequestIconElement;
  }
  interface ElementTagNameMap {
    'pull-request-icon': HTMLPullRequestIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pull-request-icon': JSXElements.PullRequestIconAttributes;
    }
  }
  namespace JSXElements {
    export interface PullRequestIconAttributes extends HTMLAttributes {
      'state'?: '' | 'open' | 'closed' | 'merged';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface RepositoryItem {
      'repository': Repository;
    }
  }

  interface HTMLRepositoryItemElement extends StencilComponents.RepositoryItem, HTMLStencilElement {}

  var HTMLRepositoryItemElement: {
    prototype: HTMLRepositoryItemElement;
    new (): HTMLRepositoryItemElement;
  };
  interface HTMLElementTagNameMap {
    'repository-item': HTMLRepositoryItemElement;
  }
  interface ElementTagNameMap {
    'repository-item': HTMLRepositoryItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'repository-item': JSXElements.RepositoryItemAttributes;
    }
  }
  namespace JSXElements {
    export interface RepositoryItemAttributes extends HTMLAttributes {
      'repository'?: Repository;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;